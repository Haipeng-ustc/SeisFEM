# include <stdlib.h>
# include <stdio.h>

int *mesh_t4_element ( int nelemx, int nelemy )

/******************************************************************************/
/*
  Purpose: 

    GRID_T4_ELEMENT produces a grid of pairs of 4 node triangles.

  Example:

    Input:

      NELEMX = 3, NELEMY = 2

    Output:

      ELEMENT_NODE = 
         1,  2,  11,  5;
        12, 11,   2,  8;
         2,  3,  12,  6;
        13, 12,   3,  9;
         3   4   13,  7;
        14, 13,   4,  10;
        11, 12,  21,  15;
        22, 21,  12,  18;
        12, 13,  22,  16;
        23, 22,  13,  19;
        13  14   23,  17;
        24, 23,  14,  20;

  Grid:

   21---22---23---24
    |\18 |\19 |\20 |
    | \  | \  | \  |
    |  \ |  \ |  \ |
    | 15\| 16\| 17\|
   11---12---13---14
    |\ 8 |\ 9 |\10 |
    | \  | \  | \  |
    |  \ |  \ |  \ |
    | 5 \|  6\|  7\|
    1----2----3----4

  Element T4:

    |
    1  3
    |  |\
    |  | \
    S  |  \
    |  | 4 \
    |  |    \
    0  1-----2
    |
    +--0--R--1-->

  Licensing:

    This code is distributed under the GNU LGPL license. 

  Modified:

    26 January 2013

  Author:

    John Burkardt

  Parameters:

    Input, int NELEMX, NELEMY, the number of elements along the
    X and Y directions.  The number of elements generated will be
    2 * NELEMX * NELEMY.

    Output, int GRID_T4[4*2*NELEMX*NELEMY], the nodes that form
    each element.
*/
{
  int element;
  int *element_node;
  int element_order = 4;
  int i;
  int j;
  int nc;
  int ne;
  int nw;
  int sc;
  int se;
  int sw;

  element_node = ( int * ) malloc ( element_order*2*nelemx*nelemy * sizeof ( int ) );
/*
  Node labeling:

    NW----NE
     |\   |
     | \NC|
     |SC\ |
     |   \|
    SW---SE
*/
  element = 0;
 
  for ( j = 1; j <= nelemy; j++ )
  {
    for ( i = 1; i <= nelemx; i++ )
    {
      sw = i     + ( j - 1 ) * ( 3 * nelemx + 1 );
      se = sw + 1;
      sc = sw +     nelemx + 1;
      nc = sw + 2 * nelemx + 1;
      nw = sw + 3 * nelemx + 1;
      ne = sw + 3 * nelemx + 2;

      element_node[0+element*element_order] = sw;
      element_node[1+element*element_order] = se;
      element_node[2+element*element_order] = nw;
      element_node[3+element*element_order] = sc;
      element = element + 1;

      element_node[0+element*element_order] = ne;
      element_node[1+element*element_order] = nw;
      element_node[2+element*element_order] = se;
      element_node[3+element*element_order] = nc;
      element = element + 1;
    }
  }

  return element_node;
}